{"version":3,"sources":["components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/ProfileInfo/ProfileStatusHook.jsx","components/Profile/MyPosts/ProfileInfo/ProfileDataForm.jsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/NewPostForm.jsx","components/Profile/MyPosts/NewPosts.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/NewPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusHook","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","style","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","onDoubleClick","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","onSubmit","profile","editButton","commonError","margin","createField","Input","Textarea","type","field","Object","keys","userProfile","contacts","map","key","Contact","contactTitle","contactValue","ProfileData","isOwner","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileInfo","Preloader","info","alt","avatar","src","photos","small","photoNull","label","savePhoto","target","files","initialValues","formData","saveProfile","then","maxLength","maxLengthCreator","NewPostFormRedux","Field","textArea","component","placeholder","name","validate","required","NewPost","posts","addPost","newPostItem","Post","React","memo","post","like","likesCount","NewPostContainer","connect","state","newPostText","profilePage","postData","p","id","Profile","content","ProfileContainer","userId","this","match","params","authUser","setProfileThunk","getStatusThunk","refreshProfile","prevProps","savePhotoThunk","saveProfileThunk","updateStatusThunk","Component","compose","auth","isAuth","withRouter","WithAuthRedirect"],"mappings":"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","file":"static/js/4.935a1ad2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3Y551\",\"like\":\"Post_like__1FI2H\"};","import React, { useState } from \"react\"\r\nimport { useEffect } from \"react\";\r\nimport style from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusHook = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect ( () => {\r\n      setStatus(props.status);\r\n    }, [props.status] )\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className={style.status}>\r\n          <b>My best status:</b>  \r\n          {editMode ? (\r\n            <div>\r\n              <input onChange={onStatusChange} onBlur={deactivateEditMode} value={status} autoFocus = {true}/>\r\n            </div>\r\n          ) : (\r\n            <div >\r\n              <span  onDoubleClick={activateEditMode}> {props.status}</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )\r\n}\r\nexport default ProfileStatusHook;","import profile from './ProfileInfo.module.css';\r\nimport React from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport { createField, Input, Textarea } from '../../../common/controls/FormControl';\r\nimport style from './../../../common/controls/FormControl.module.css';\r\n\r\n\r\nconst ProfileDataForm = ({handleSubmit, props, error}) => {\r\n    \r\n    return <form onSubmit={handleSubmit}>\r\n                <button className={profile.editButton}>save</button>\r\n                {error && <div className={style.commonError}>\r\n                {error}\r\n            </div>}\r\n                <div className={profile.margin}>\r\n                    Full name: \r\n                {createField(Input, null, 'fullName', null, 'Full name')} \r\n                </div>\r\n                <div className={profile.margin}>\r\n                        About me: \r\n                    {createField(Textarea, null, 'aboutMe', null, 'About me')}\r\n                </div>\r\n                <div className={profile.margin}>\r\n                        Loking for a job: \r\n                    {createField(Input, null, 'lookingForAJob', null, null, {type: \"checkbox\"})}\r\n                </div>\r\n                <div className={profile.margin}>\r\n                        My professional skills: \r\n                    {createField(Textarea, null, 'lookingForAJobDescription', null, 'My professional skills')}\r\n                </div>\r\n                <div className={profile.margin}>\r\n                    <span className={profile.field}>\r\n                        Contacts: \r\n                    </span>  \r\n                        {Object.keys(props.userProfile.contacts).map(key => {\r\n                            return <div key={key}><b>{key}:</b> {createField(Input, null, \"contacts.\" + key, null, key)} </div>\r\n                        })}\r\n                </div>\r\n            </form>\r\n}  \r\n\r\nconst ProfileDataReduxForm = reduxForm({\r\n    form: 'editProfile'\r\n})(ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;","import React, { useState } from 'react';\r\nimport profile from './ProfileInfo.module.css';\r\nimport Preloader from '../../../common/Preloader';\r\nimport photoNull from '../../../../img/31nxvlzm90L._SY450_.jpg';\r\nimport ProfileStatusHook from './ProfileStatusHook';\r\nimport ProfileDataReduxForm from './ProfileDataForm';\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={profile.contacts}> <span className={profile.field}>{contactTitle}:</span> {contactValue==null ? 'ne ukazano' : contactValue}</div>\r\n    }  \r\n\r\nconst ProfileData = ({props, setEditMode}) => {\r\n\r\n    return <div>\r\n                 {props.isOwner && <button className={profile.editButton} onClick={setEditMode}>Edit profile</button>}\r\n                <div className={profile.margin}>\r\n                <span className={profile.field}>\r\n                    Full name: \r\n                </span>  \r\n                {props.userProfile.fullName} \r\n                </div>\r\n                <div className={profile.margin}>\r\n                    <span className={profile.field}>\r\n                        About me: \r\n                    </span>  \r\n                    {props.userProfile.aboutMe}\r\n                </div>\r\n                <div className={profile.margin}>\r\n                    <span className={profile.field}>\r\n                        Loking for a job: \r\n                    </span>  \r\n                    {props.userProfile.lookingForAJob ? \"yes\" : \"no\"}\r\n                </div>\r\n                <div className={profile.margin}>\r\n                    <span className={profile.field}>\r\n                        Professional skills: \r\n                    </span>  \r\n                    {props.userProfile.lookingForAJobDescription}\r\n                </div>\r\n                <div className={profile.margin}>\r\n                    <span className={profile.field}>\r\n                        Contacts: \r\n                    </span>  \r\n                        {Object.keys(props.userProfile.contacts).map(key => {\r\n                            return <Contact key={key} contactTitle={key} contactValue={props.userProfile.contacts[key]} />\r\n                        })}\r\n                </div>\r\n            </div>\r\n    \r\n}\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if(!props.userProfile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        props.savePhoto(e.target.files[0])\r\n        \r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData)\r\n        .then(() => {\r\n            setEditMode(false);\r\n        })\r\n    }\r\n\r\n    return <div className={profile.info}>\r\n        <div className={profile.status}><img alt='avatar' className={profile.avatar} \r\n        src={props.userProfile.photos.small===null ? photoNull : props.userProfile.photos.small}/>\r\n        <ProfileStatusHook status={props.status} updateStatus={props.updateStatus}/>\r\n        </div>\r\n        <div>\r\n            {props.isOwner && <label className={profile.label}>Load new image\r\n                                    <input type=\"file\" onChange={onMainPhotoSelected} />\r\n                              </label>}\r\n        </div>\r\n        {editMode ? <ProfileDataReduxForm initialValues={props.userProfile} props={props} onSubmit={onSubmit} /> : <ProfileData props={props} setEditMode={setEditMode}/>}\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validator';\r\nimport { Textarea } from '../../common/controls/FormControl';\r\nimport style from './ProfileInfo/ProfileInfo.module.css';\r\n\r\nconst maxLength = maxLengthCreator(10);\r\n\r\nconst NewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field className={style.textArea} component={Textarea} placeholder='Post message' name='newPostItem' validate= {[required, maxLength]}/>\r\n            </div>\r\n            <div>\r\n                <button className={style.editButton}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst NewPostFormRedux = reduxForm({form:'newPost'})(NewPostForm);\r\n\r\nexport default NewPostFormRedux;","import React from 'react';\r\nimport profile from'./../Profile.module.css';\r\nimport NewPostFormRedux from './NewPostForm';\r\n\r\nconst NewPost = props => {\r\n  let onSubmit = (formData) => {\r\n    props.addPost(formData.newPostItem);\r\n    formData.newPostItem = '';\r\n  }\r\n\r\n    return(\r\n    <div>\r\n      <div className={profile.posts}>\r\n        <h3>My posts</h3>\r\n        <NewPostFormRedux onSubmit={onSubmit}/>\r\n      </div>\r\n      <div >\r\n        {props.posts}\r\n      </div>\r\n      \r\n    </div>)\r\n}\r\n\r\nexport default NewPost;","import React from 'react';\r\nimport post from './Post.module.css';\r\n\r\nconst Post =React.memo(props => {\r\n    return(\r\n            <div className={post.post}>\r\n                <img alt='avatar' src='https://images-na.ssl-images-amazon.com/images/I/31nxvlzm90L._SY450_.jpg'/>\r\n                {props.post} <span className={post.like}>Like {props.likesCount}</span>\r\n            </div>    \r\n    )\r\n}) \r\nexport default Post;","import React from 'react';\r\nimport { addPost } from '../../../redux/profileReducer';\r\nimport NewPost from './NewPosts';\r\nimport Post from './Post/Post';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    newPostText: state.profilePage.newPostText,\r\n    posts: state.profilePage.postData.map(p => <Post post={p.post} key={p.id} likesCount={p.likesCount}/>)\r\n  }\r\n}\r\n\r\nconst NewPostContainer = connect(mapStateToProps, {addPost})(NewPost);\r\n\r\nexport default NewPostContainer;","import React from 'react';\r\nimport profile from'./Profile.module.css';\r\nimport ProfileInfo from './MyPosts/ProfileInfo/ProfileInfo';\r\nimport NewPostContainer from './MyPosts/NewPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n    return(\r\n      \r\n    <div className={profile.content}>\r\n\r\n      <ProfileInfo isOwner={props.isOwner} \r\n                   userProfile={props.userProfile} \r\n                   status={props.status} \r\n                   savePhoto={props.savePhoto}\r\n                   saveProfile={props.saveProfile}\r\n                   updateStatus={props.updateStatus}/>\r\n      <NewPostContainer />\r\n      \r\n  </div>)\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {setProfileThunk, getStatusThunk, updateStatusThunk, savePhotoThunk, saveProfileThunk} from './../../redux/profileReducer';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { WithAuthRedirect } from '../../hoc/WithAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile () {\r\n        let userId = this.props.match.params.userId;\r\n        if(!userId) {\r\n            userId = this.props.authUser;\r\n        }\r\n        this.props.setProfileThunk(userId);\r\n        this.props.getStatusThunk(userId);\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate (prevProps) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {     \r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Profile {...this.props} userProfile={this.props.userProfile} \r\n                                     status={this.props.status} \r\n                                     savePhoto={this.props.savePhotoThunk}\r\n                                     saveProfile={this.props.saveProfileThunk}\r\n                                     updateStatus={this.props.updateStatusThunk}\r\n                                     isOwner={!this.props.match.params.userId}/>\r\n        )       \r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    userProfile: state.profilePage.userProfile,\r\n    status: state.profilePage.status,\r\n    authUser: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {setProfileThunk, getStatusThunk, updateStatusThunk, savePhotoThunk, saveProfileThunk}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}